// source: bottle/support/v1/question.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var bottle_account_v1_user_pb = require('../../../bottle/account/v1/user_pb.js');
goog.object.extend(proto, bottle_account_v1_user_pb);
goog.exportSymbol('proto.bottle.support.v1.Question', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bottle.support.v1.Question = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bottle.support.v1.Question.repeatedFields_, null);
};
goog.inherits(proto.bottle.support.v1.Question, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bottle.support.v1.Question.displayName = 'proto.bottle.support.v1.Question';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bottle.support.v1.Question.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bottle.support.v1.Question.prototype.toObject = function(opt_includeInstance) {
  return proto.bottle.support.v1.Question.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bottle.support.v1.Question} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.support.v1.Question.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subject: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    customFieldsMap: (f = msg.getCustomFieldsMap()) ? f.toObject(includeInstance, undefined) : [],
    customer: (f = msg.getCustomer()) && bottle_account_v1_user_pb.User.toObject(includeInstance, f),
    submitter: (f = msg.getSubmitter()) && bottle_account_v1_user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bottle.support.v1.Question}
 */
proto.bottle.support.v1.Question.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bottle.support.v1.Question;
  return proto.bottle.support.v1.Question.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bottle.support.v1.Question} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bottle.support.v1.Question}
 */
proto.bottle.support.v1.Question.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 5:
      var value = msg.getCustomFieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 6:
      var value = new bottle_account_v1_user_pb.User;
      reader.readMessage(value,bottle_account_v1_user_pb.User.deserializeBinaryFromReader);
      msg.setCustomer(value);
      break;
    case 7:
      var value = new bottle_account_v1_user_pb.User;
      reader.readMessage(value,bottle_account_v1_user_pb.User.deserializeBinaryFromReader);
      msg.setSubmitter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bottle.support.v1.Question.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bottle.support.v1.Question.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bottle.support.v1.Question} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bottle.support.v1.Question.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getCustomFieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getCustomer();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      bottle_account_v1_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getSubmitter();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      bottle_account_v1_user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.bottle.support.v1.Question.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bottle.support.v1.Question} returns this
 */
proto.bottle.support.v1.Question.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string subject = 2;
 * @return {string}
 */
proto.bottle.support.v1.Question.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bottle.support.v1.Question} returns this
 */
proto.bottle.support.v1.Question.prototype.setSubject = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.bottle.support.v1.Question.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bottle.support.v1.Question} returns this
 */
proto.bottle.support.v1.Question.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string tags = 4;
 * @return {!Array<string>}
 */
proto.bottle.support.v1.Question.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.bottle.support.v1.Question} returns this
 */
proto.bottle.support.v1.Question.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.bottle.support.v1.Question} returns this
 */
proto.bottle.support.v1.Question.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bottle.support.v1.Question} returns this
 */
proto.bottle.support.v1.Question.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * map<string, string> custom_fields = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.bottle.support.v1.Question.prototype.getCustomFieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.bottle.support.v1.Question} returns this
 */
proto.bottle.support.v1.Question.prototype.clearCustomFieldsMap = function() {
  this.getCustomFieldsMap().clear();
  return this;};


/**
 * optional bottle.account.v1.User customer = 6;
 * @return {?proto.bottle.account.v1.User}
 */
proto.bottle.support.v1.Question.prototype.getCustomer = function() {
  return /** @type{?proto.bottle.account.v1.User} */ (
    jspb.Message.getWrapperField(this, bottle_account_v1_user_pb.User, 6));
};


/**
 * @param {?proto.bottle.account.v1.User|undefined} value
 * @return {!proto.bottle.support.v1.Question} returns this
*/
proto.bottle.support.v1.Question.prototype.setCustomer = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.support.v1.Question} returns this
 */
proto.bottle.support.v1.Question.prototype.clearCustomer = function() {
  return this.setCustomer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.support.v1.Question.prototype.hasCustomer = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bottle.account.v1.User submitter = 7;
 * @return {?proto.bottle.account.v1.User}
 */
proto.bottle.support.v1.Question.prototype.getSubmitter = function() {
  return /** @type{?proto.bottle.account.v1.User} */ (
    jspb.Message.getWrapperField(this, bottle_account_v1_user_pb.User, 7));
};


/**
 * @param {?proto.bottle.account.v1.User|undefined} value
 * @return {!proto.bottle.support.v1.Question} returns this
*/
proto.bottle.support.v1.Question.prototype.setSubmitter = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bottle.support.v1.Question} returns this
 */
proto.bottle.support.v1.Question.prototype.clearSubmitter = function() {
  return this.setSubmitter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bottle.support.v1.Question.prototype.hasSubmitter = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto.bottle.support.v1);
